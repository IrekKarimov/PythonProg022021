import math

QA_dveri = [[14, 16, 22, 22, 20],
          [19, 23, 30, 33, 32],
          [23, 24, 24, 24, 23],
          [27, 32, 35, 34, 35],
          [23, 31, 33, 34, 36],
          [30, 33, 35, 39, 41],
          [26, 30, 31, 28, 29],
          [30, 33, 36, 32, 30],
          [30, 39, 42, 45, 43],
          [42, 55, 58, 60, 60],
          [36, 45, 51, 50, 49],
          [46, 60, 60, 65, 65],
          [58, 65, 70, 70, 70]]

QA_sten = [[40, 42, 48, 54, 60],
           [44, 51, 58, 64, 65],
           [48, 55, 61, 65, 65],
           [52, 59, 65, 70, 70],
           [55, 60, 67, 70, 70],
           [38, 49, 57, 59, 52],
           [36, 46, 51, 62, 48],
           [35, 44, 51, 62, 48],
           [40, 44, 50, 55, 60],
           [44, 51, 59, 65, 65],
           [50, 58, 65, 69, 69],
           [55, 61, 67, 70, 70],
           [43, 40, 39, 57, 40]]

QA_sten2 =[[33, 50, 53, 53, 50],
           [34, 52, 59, 60, 44],
           [37, 46, 57, 62, 47],
           [41, 49, 58, 59, 44],
           [44, 51, 60, 61, 47],
           [47, 53, 62, 63, 49],
           [40, 49, 58, 60, 51],
           [43, 54, 59, 60, 52],
           [40, 50, 57, 60, 52],
           [40, 52, 59, 61, 52],
           [47, 53, 59, 61, 52],
           [49, 54, 61, 63, 54],
           [51, 55, 63, 65, 55],
           [49, 56, 63, 64, 57],
           [48, 56, 61, 63, 55],
           [51, 58, 63, 64, 58],
           [52, 57, 62, 63, 55],
           [53, 59, 63, 63, 56],
           [55, 59, 62, 61, 51],
           [51, 55, 59, 63, 57],
           [51, 57, 61, 64, 56],
           [48, 59, 62, 59, 47],
           [49, 58, 62, 59, 49]]

p_mat = 33.5
Q_dop = 0
# дополнительный облицовочный материал
if p_mat > 0:
    Q_dop = 12.5 * math.log(p_mat, 10) + 14

print("Q_dop =", Q_dop)

def get_k(f):
    # коэффициенты веса граничных частот октавного фильтра k(f)

    k = 0
    if 100 < f <= 400:
        k = 2.57 * pow(10, -8) * pow(f, 2.4)
    elif 400 < f <= 10000:
        k = 1 - 1.074 * math.exp( -0.0001 * pow(f, 1.18))
    return k


def get_da(f):
    # Энергетическая избыточность каждой i-ой октавной полосы частот ∆Ai

    d_A = 0
    if f <= 1000:
        d_A = 200 / pow(f, 0.43) - 0.37
    else:
        d_A = 1.37 + 1000 / pow(f, 0.69)
    return d_A


def get_wi(Ef):
    # Коэффициенты восприятия формант в каждой i-ой октавной полосе wi

    wi = 0
    if Ef <= 0:
        wi = ((0.78 + 5.46 * math.exp( -4.3 * pow(10, -3) * pow(27.3 - abs(Ef), 2) ))) / (1 + pow(10, 0.1 * abs(Ef)))
    else:
        wi = 1 - (0.78 + 5.46 * math.exp(-4.3 * pow(10, -3) * pow(27.3 - abs(Ef), 2))) / (1 + pow(10, 0.1 * abs(Ef)))
    return wi

def get_W(Q_pereg, n):
    # Словесная разборчивость W

    AA = 0
    data = [[250, 175, 355, 58, 30],
            [500, 355, 710, 58, 30],
            [1000, 710, 1400, 53, 25],
            [2000, 1400, 2800, 48, 25],
            [4000, 2800, 5600, 45, 25]]

    for i in range(5):
        a = data[i]

        k_verh = round(get_k(a[2]), 5)
        k_niz = round(get_k(a[1]), 5)
        ki = round(k_verh - k_niz, 5)

        data[i].append(k_niz)
        data[i].append(k_verh)
        data[i].append(ki)

        d_A = round(get_da(a[0]), 5)
        data[i].append(d_A)

        # Эффективный уровень ощущения формант в каждой i-ой октавной полосе частот Eфi
        E_f = round(a[3] - a[4] - d_A - Q_pereg[i] - Q_dop, 5)
        data[i].append(E_f)

        wi = round(get_wi(E_f), 5)
        data[i].append(wi)

        # Разборчивость формант в i-ой полосе частот Аi
        Ai = round(wi * ki, 5)
        AA += Ai
        data[i].append(Ai)

    print("№ -", n, ". Q_перег =", Q_pereg)
    print("-"*107)
    print("{0:4} |{1:6}|{2:5}|{3} |{4}| {5:8}| {6:8} | {7:8} | {8:8} | {9:8}  | {10:8} | {11:8} |".format("f_sr", "f_niz", "f_verh", "L_s", "L_sh", "k_niz_i", "k_verh_i", "k_i", "d_A_i", "E_f_i", "w_i", "A_i"))

    print("-"*107)
    for x in data:
        print("{0:4} | {1:4} | {2:4} | {3} | {4} | {5} | {6:8.5f} | {7:8.5f} | {8:8.5f} | {9:9.5f} | {10:8.5f} | {11:8.5f} |".format( x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11]))
    print("-"*107)

    AA = round(AA, 5)
    print("A = ", AA)

    if AA < 0.15:
        W = 1.54 * pow(AA, 0.25) * (1 - math.exp(-11 * AA))
        print("W (A < 0.15) = {0:8.6f}".format(W))
    else:
        W = 1 - math.exp(-11 * AA / (1 - 0.7 * AA))
        print("W (A > 0.15) = {0:8.6f}".format(W))

    print("W (%) = {0:5.2f}".format(W * 100))


# Перебираем все материалы
n = 1
for q in QA_sten:
    get_W(q, n)
    n += 1

    print("==============\n\n")